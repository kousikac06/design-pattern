version: '3.5'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  backendcode:

services:

  ### NGINX Server #########################################
  nginx:
    build: ./nginx
    hostname: backend
    restart: always
    volumes:
      - ./nginx/src:/var/www
      - ${DATA_PATH_HOST}/storage:/var/www/storage
    depends_on:
      - mysql
      - php-fpm
    networks:
      - frontend
      - backend

  ### Workspace Utilities ##################################
  workspace:
    build: ./workspace
    hostname: workspace
    restart: always
    volumes:
      - ./nginx/src:/var/www
      - ${DATA_PATH_HOST}/storage:/var/www/storage
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    tty: true
    environment:
      - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
    depends_on:
      - nginx
    networks:
      - frontend
      - backend

  ### PHP-FPM ##############################################
  php-fpm:
    build: ./php-fpm
    hostname: php-fpm
    restart: always
    expose:
      - "9000"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    environment:
      - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      - FAKETIME=${PHP_FPM_FAKETIME}
    depends_on:
      - mysql
    networks:
      - backend

  ### PHP Worker ############################################
  php-worker:
    build: ./php-worker
    hostname: php-worker
    restart: always
    volumes:
      - ./nginx/src:/var/www
      - ${DATA_PATH_HOST}/storage:/var/www/storage
    depends_on:
      - nginx
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    networks:
      - backend

  ### MySQL ################################################
  mysql:
    build: ./mysql
    hostname: mysql
    restart: always
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_ROOT_HOST=${MYSQL_ROOT_HOST}
      - TZ=${WORKSPACE_TIMEZONE}
      - ADMINER_DEFAULT_SERVER=mysql
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    command: mysqld --innodb-buffer-pool-size=10G
    networks:
      - backend

  ### Adminer ###########################################
  adminer:
    build: ./adminer
    hostname: adminer
    restart: always
    depends_on:
      - php-fpm
    networks:
      - frontend
      - backend

  #### Docker-in-Docker ################################################
  #    docker-in-docker:
  #      image: docker:20.10-dind
  #      environment:
  #        DOCKER_TLS_SAN: DNS:docker-in-docker
  #      privileged: true
  #      volumes:
  #        - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
  #        - docker-in-docker:/certs/client
  #      expose:
  #        - 2375
  #      networks:
  #        - backend

  #  ### Redis ################################################
  #    redis:
  #      build: ./redis
  #      volumes:
  #        - ${DATA_PATH_HOST}/redis:/data
  #      command: --requirepass ${REDIS_PASSWORD}
  #      ports:
  #        - "${REDIS_PORT}:6379"
  #      networks:
  #        - backend

  ### Caddy Server #########################################
  caddy:
    build: ./caddy
    volumes:
      - ${CADDY_CONFIG_PATH}/Caddyfile:/etc/caddy/Caddyfile
    ports:
      - "${CADDY_HOST_HTTP_PORT}:80"
      - "${CADDY_HOST_HTTPS_PORT}:443"
    depends_on:
      - php-fpm
    networks:
      - frontend
      - backend

#### ElasticSearch ########################################
#    elasticsearch:
#      build:
#        context: ./elasticsearch
#        args:
#          - ELK_VERSION=${ELK_VERSION}
#      volumes:
#        - elasticsearch:/usr/share/elasticsearch/data
#      environment:
#        - cluster.name=laradock-cluster
#        - node.name=laradock-node
#        - bootstrap.memory_lock=true
#        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#        - cluster.initial_master_nodes=laradock-node
#      ulimits:
#        memlock:
#          soft: -1
#          hard: -1
#        nofile:
#          soft: 65536
#          hard: 65536
#      ports:
#        - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
#        - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
#      depends_on:
#        - php-fpm
#      networks:
#        - frontend
#        - backend

#### Logstash ##############################################
#    logstash:
#      build:
#        context: ./logstash
#        args:
#          - ELK_VERSION=${ELK_VERSION}
#      volumes:
#        - './logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml'
#        - './logstash/pipeline:/usr/share/logstash/pipeline'
#      ports:
#        - '5001:5001'
#      environment:
#        LS_JAVA_OPTS: '-Xmx1g -Xms1g'
#      env_file:
#        - .env
#      networks:
#        - frontend
#        - backend
#      depends_on:
#        - elasticsearch

#### Kibana ##############################################
#    kibana:
#      build:
#        context: ./kibana
#        args:
#          - ELK_VERSION=${ELK_VERSION}
#      ports:
#        - "${KIBANA_HTTP_PORT}:5601"
#      depends_on:
#        - elasticsearch
#      networks:
#        - frontend
#        - backend

#### HAProxy ####################################
#    haproxy:
#      build: ./haproxy
#      ports:
#        - "${HAPROXY_HOST_HTTP_PORT}:8085"
#      volumes:
#        - /var/run/docker.sock:/var/run/docker.sock
#      links:
#        - proxy
#        - proxy2
